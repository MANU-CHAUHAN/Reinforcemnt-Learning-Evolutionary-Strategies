import gym
import random
import numpy as np

env = gym.make('Taxi-v3')

stat_size = env.observation_space.n
action_size = env.action_space.n

qtable = np.zeros((stat_size, action_size))

print(qtable)

# hyper parameters
total_episodes = 10000
learning_rate = 0.8
max_steps = 99
gamma = 0.95

# exploration parameters
epsilon = 1.0
max_epsilon = 1.0
min_epsilon = 0.01
decay_rate = 0.005

rewards = []

for episode in range(total_episodes):
    state = env.reset()
    done = False
    step = 0
    episodic_reward = 0

    for step in range(max_steps):
        if random.uniform(0, 1) > epsilon:
            action = np.argmax(qtable[state, :])
        else:
            action = env.action_space.sample()

        new_state, reward, done, info = env.step(action)

        qtable[state, action] = qtable[state, action] + learning_rate * (
                reward + gamma * (np.max(qtable[new_state, :]) - qtable[state, action]))

        episodic_reward += reward
        state = new_state

        if done:
            break

    rewards.append(episodic_reward)

    # epsilon decay
    epsilon = min_epsilon + (max_epsilon - min_epsilon) * np.exp(-decay_rate * episode)

print("score", sum(rewards)/total_episodes)

print(qtable)

# use Q-table to play taxi

for episode in range(1, 4):
    print('|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\n \n ')
    print('scenario number:', episode)
    state = env.reset()
    env.render()
    done = False

    for step in range(max_steps):
        action = np.argmax(qtable[state, :])

        state, reward, done, info = env.step(action)

        env.render()

        if done:
            print("number of steps it took for this scenario/episode:", step)
            break

